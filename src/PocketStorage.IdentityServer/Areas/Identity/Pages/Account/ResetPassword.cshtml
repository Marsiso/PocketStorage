@page
@model ResetPasswordModel
@{
    ViewData["Title"] = "Reset password";
}

<div class="text-center mb-3">
    <h1 class="display-6">Reset password</h1>
</div>
<div class="row justify-content-center">
    <div class="col-12" style="max-width: 20rem;">
        <form method="post" class="needs-validation" novalidate>
            <input asp-for="Form.Code" type="hidden"/>
            <div class="mb-3">
                <label asp-for="Form.Email" class="form-label">Email</label>
                <input asp-for="Form.Email" type="email" class="@(Model.Errors.ContainsKey(nameof(Model.Form.Email)) ? "form-control is-invalid" : "form-control")" autocomplete="email" aria-required="true" placeholder="Your email address" required/>
                @if (Model.Errors.TryGetValue(nameof(Model.Form.Email), out var emailErrors))
                {
                    <div class="invalid-feedback">
                        @emailErrors.First()
                    </div>
                }
            </div>
            <div class="mb-3">
                <label asp-for="Form.Password" class="form-label">Password</label>
                <input asp-for="Form.Password" type="password" class="@(Model.Errors.ContainsKey(nameof(Model.Form.Password)) ? "form-control is-invalid" : "form-control")" autocomplete="new-password" aria-required="true" placeholder="Your password" required/>
                @if (Model.Errors.TryGetValue(nameof(Model.Form.Password), out var passwordErrors))
                {
                    <div class="invalid-feedback">
                        @passwordErrors.First()
                    </div>
                }
            </div>
            <div class="mb-3">
                <label asp-for="Form.ConfirmPassword" class="form-label">Confirm password</label>
                <input asp-for="Form.ConfirmPassword" type="password" class="@(Model.Errors.ContainsKey(nameof(Model.Form.ConfirmPassword)) ? "form-control is-invalid" : "form-control")" autocomplete="new-password" aria-required="true" placeholder="Confirm your password" required/>
                @if (Model.Errors.TryGetValue(nameof(Model.Form.ConfirmPassword), out var confirmPasswordErrors))
                {
                    <div class="invalid-feedback">
                        @confirmPasswordErrors.First()
                    </div>
                }
            </div>
            <button type="submit" class="w-100 btn btn-primary">Reset</button>
        </form>
    </div>
</div>
